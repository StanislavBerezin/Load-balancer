# because we called client, client in docker, so we say
# upstream client
upstream client {
    # then we speciy for nginux server to listen for client
    # on port 3000
   
    server client:3000;
}


upstream socket {
    server socket:8888;
}
# the same like above to express api
upstream api {
    server api:8080;
}

# this the nginx configuration
server{
    # nginx work on port 80
    listen 80;

# everytime when somebody goes to "/" that is a client, defined
# in upstream above
    location / {
        proxy_pass http://client;
    }


  location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

# the same here with with a bit of regex to cut off "/api"
# before sending it.
    location /api {
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
         proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
  
      
        
    
    }

    location /socket {
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Host      $http_host;
        rewrite /socket/(.*) /$1 break;
        proxy_pass http://socket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
  
      
        
    
    }


    location /socket.io {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_pass http://socket/socket.io/;
    }
}